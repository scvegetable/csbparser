// automatically generated by the FlatBuffers compiler, do not modify

package csbparser

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type WidgetOptions struct {
	_tab flatbuffers.Table
}

func GetRootAsWidgetOptions(buf []byte, offset flatbuffers.UOffsetT) *WidgetOptions {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &WidgetOptions{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *WidgetOptions) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *WidgetOptions) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *WidgetOptions) Name() string {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.String(o + rcv._tab.Pos)
	}
	return ""
}

func (rcv *WidgetOptions) ActionTag() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *WidgetOptions) MutateActionTag(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *WidgetOptions) RotationSkew(obj *RotationSkew) *RotationSkew {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(RotationSkew)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *WidgetOptions) ZOrder() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *WidgetOptions) MutateZOrder(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *WidgetOptions) Visible() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return true
}

func (rcv *WidgetOptions) MutateVisible(n bool) bool {
	return rcv._tab.MutateBoolSlot(12, n)
}

func (rcv *WidgetOptions) Alpha() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 255
}

func (rcv *WidgetOptions) MutateAlpha(n byte) bool {
	return rcv._tab.MutateByteSlot(14, n)
}

func (rcv *WidgetOptions) Tag() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *WidgetOptions) MutateTag(n int32) bool {
	return rcv._tab.MutateInt32Slot(16, n)
}

func (rcv *WidgetOptions) Position(obj *Position) *Position {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Position)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *WidgetOptions) Scale(obj *Scale) *Scale {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Scale)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *WidgetOptions) AnchorPoint(obj *AnchorPoint) *AnchorPoint {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(AnchorPoint)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *WidgetOptions) Color(obj *Color) *Color {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Color)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *WidgetOptions) Size(obj *FlatSize) *FlatSize {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(FlatSize)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *WidgetOptions) FlipX() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *WidgetOptions) MutateFlipX(n bool) bool {
	return rcv._tab.MutateBoolSlot(28, n)
}

func (rcv *WidgetOptions) FlipY() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *WidgetOptions) MutateFlipY(n bool) bool {
	return rcv._tab.MutateBoolSlot(30, n)
}

func (rcv *WidgetOptions) IgnoreSize() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *WidgetOptions) MutateIgnoreSize(n bool) bool {
	return rcv._tab.MutateBoolSlot(32, n)
}

func (rcv *WidgetOptions) TouchEnabled() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *WidgetOptions) MutateTouchEnabled(n bool) bool {
	return rcv._tab.MutateBoolSlot(34, n)
}

func (rcv *WidgetOptions) FrameEvent() string {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.String(o + rcv._tab.Pos)
	}
	return ""
}

func (rcv *WidgetOptions) CustomProperty() string {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.String(o + rcv._tab.Pos)
	}
	return ""
}

func (rcv *WidgetOptions) CallBackType() string {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.String(o + rcv._tab.Pos)
	}
	return ""
}

func (rcv *WidgetOptions) CallBackName() string {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.String(o + rcv._tab.Pos)
	}
	return ""
}

func (rcv *WidgetOptions) LayoutComponent(obj *LayoutComponentTable) *LayoutComponentTable {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(LayoutComponentTable)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func WidgetOptionsStart(builder *flatbuffers.Builder) {
	builder.StartObject(21)
}
func WidgetOptionsAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func WidgetOptionsAddActionTag(builder *flatbuffers.Builder, actionTag int32) {
	builder.PrependInt32Slot(1, actionTag, 0)
}
func WidgetOptionsAddRotationSkew(builder *flatbuffers.Builder, rotationSkew flatbuffers.UOffsetT) {
	builder.PrependStructSlot(2, flatbuffers.UOffsetT(rotationSkew), 0)
}
func WidgetOptionsAddZOrder(builder *flatbuffers.Builder, zOrder int32) {
	builder.PrependInt32Slot(3, zOrder, 0)
}
func WidgetOptionsAddVisible(builder *flatbuffers.Builder, visible bool) {
	builder.PrependBoolSlot(4, visible, true)
}
func WidgetOptionsAddAlpha(builder *flatbuffers.Builder, alpha byte) {
	builder.PrependByteSlot(5, alpha, 255)
}
func WidgetOptionsAddTag(builder *flatbuffers.Builder, tag int32) {
	builder.PrependInt32Slot(6, tag, 0)
}
func WidgetOptionsAddPosition(builder *flatbuffers.Builder, position flatbuffers.UOffsetT) {
	builder.PrependStructSlot(7, flatbuffers.UOffsetT(position), 0)
}
func WidgetOptionsAddScale(builder *flatbuffers.Builder, scale flatbuffers.UOffsetT) {
	builder.PrependStructSlot(8, flatbuffers.UOffsetT(scale), 0)
}
func WidgetOptionsAddAnchorPoint(builder *flatbuffers.Builder, anchorPoint flatbuffers.UOffsetT) {
	builder.PrependStructSlot(9, flatbuffers.UOffsetT(anchorPoint), 0)
}
func WidgetOptionsAddColor(builder *flatbuffers.Builder, color flatbuffers.UOffsetT) {
	builder.PrependStructSlot(10, flatbuffers.UOffsetT(color), 0)
}
func WidgetOptionsAddSize(builder *flatbuffers.Builder, size flatbuffers.UOffsetT) {
	builder.PrependStructSlot(11, flatbuffers.UOffsetT(size), 0)
}
func WidgetOptionsAddFlipX(builder *flatbuffers.Builder, flipX bool) {
	builder.PrependBoolSlot(12, flipX, false)
}
func WidgetOptionsAddFlipY(builder *flatbuffers.Builder, flipY bool) {
	builder.PrependBoolSlot(13, flipY, false)
}
func WidgetOptionsAddIgnoreSize(builder *flatbuffers.Builder, ignoreSize bool) {
	builder.PrependBoolSlot(14, ignoreSize, false)
}
func WidgetOptionsAddTouchEnabled(builder *flatbuffers.Builder, touchEnabled bool) {
	builder.PrependBoolSlot(15, touchEnabled, false)
}
func WidgetOptionsAddFrameEvent(builder *flatbuffers.Builder, frameEvent flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(frameEvent), 0)
}
func WidgetOptionsAddCustomProperty(builder *flatbuffers.Builder, customProperty flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(customProperty), 0)
}
func WidgetOptionsAddCallBackType(builder *flatbuffers.Builder, callBackType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(callBackType), 0)
}
func WidgetOptionsAddCallBackName(builder *flatbuffers.Builder, callBackName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(callBackName), 0)
}
func WidgetOptionsAddLayoutComponent(builder *flatbuffers.Builder, layoutComponent flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(layoutComponent), 0)
}
func WidgetOptionsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
