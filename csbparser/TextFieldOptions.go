// automatically generated by the FlatBuffers compiler, do not modify

package csbparser

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type TextFieldOptions struct {
	_tab flatbuffers.Table
}

func GetRootAsTextFieldOptions(buf []byte, offset flatbuffers.UOffsetT) *TextFieldOptions {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TextFieldOptions{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *TextFieldOptions) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TextFieldOptions) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *TextFieldOptions) WidgetOptions(obj *WidgetOptions) *WidgetOptions {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(WidgetOptions)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *TextFieldOptions) FontResource(obj *ResourceData) *ResourceData {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(ResourceData)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *TextFieldOptions) FontName() string {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.String(o + rcv._tab.Pos)
	}
	return ""
}

func (rcv *TextFieldOptions) FontSize() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TextFieldOptions) MutateFontSize(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *TextFieldOptions) Text() string {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.String(o + rcv._tab.Pos)
	}
	return ""
}

func (rcv *TextFieldOptions) PlaceHolder() string {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.String(o + rcv._tab.Pos)
	}
	return ""
}

func (rcv *TextFieldOptions) PasswordEnabled() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *TextFieldOptions) MutatePasswordEnabled(n bool) bool {
	return rcv._tab.MutateBoolSlot(16, n)
}

func (rcv *TextFieldOptions) PasswordStyleText() string {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.String(o + rcv._tab.Pos)
	}
	return ""
}

func (rcv *TextFieldOptions) MaxLengthEnabled() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *TextFieldOptions) MutateMaxLengthEnabled(n bool) bool {
	return rcv._tab.MutateBoolSlot(20, n)
}

func (rcv *TextFieldOptions) MaxLength() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TextFieldOptions) MutateMaxLength(n int32) bool {
	return rcv._tab.MutateInt32Slot(22, n)
}

func (rcv *TextFieldOptions) AreaWidth() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TextFieldOptions) MutateAreaWidth(n int32) bool {
	return rcv._tab.MutateInt32Slot(24, n)
}

func (rcv *TextFieldOptions) AreaHeight() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TextFieldOptions) MutateAreaHeight(n int32) bool {
	return rcv._tab.MutateInt32Slot(26, n)
}

func (rcv *TextFieldOptions) IsCustomSize() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *TextFieldOptions) MutateIsCustomSize(n bool) bool {
	return rcv._tab.MutateBoolSlot(28, n)
}

func TextFieldOptionsStart(builder *flatbuffers.Builder) {
	builder.StartObject(13)
}
func TextFieldOptionsAddWidgetOptions(builder *flatbuffers.Builder, widgetOptions flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(widgetOptions), 0)
}
func TextFieldOptionsAddFontResource(builder *flatbuffers.Builder, fontResource flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(fontResource), 0)
}
func TextFieldOptionsAddFontName(builder *flatbuffers.Builder, fontName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(fontName), 0)
}
func TextFieldOptionsAddFontSize(builder *flatbuffers.Builder, fontSize int32) {
	builder.PrependInt32Slot(3, fontSize, 0)
}
func TextFieldOptionsAddText(builder *flatbuffers.Builder, text flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(text), 0)
}
func TextFieldOptionsAddPlaceHolder(builder *flatbuffers.Builder, placeHolder flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(placeHolder), 0)
}
func TextFieldOptionsAddPasswordEnabled(builder *flatbuffers.Builder, passwordEnabled bool) {
	builder.PrependBoolSlot(6, passwordEnabled, false)
}
func TextFieldOptionsAddPasswordStyleText(builder *flatbuffers.Builder, passwordStyleText flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(passwordStyleText), 0)
}
func TextFieldOptionsAddMaxLengthEnabled(builder *flatbuffers.Builder, maxLengthEnabled bool) {
	builder.PrependBoolSlot(8, maxLengthEnabled, false)
}
func TextFieldOptionsAddMaxLength(builder *flatbuffers.Builder, maxLength int32) {
	builder.PrependInt32Slot(9, maxLength, 0)
}
func TextFieldOptionsAddAreaWidth(builder *flatbuffers.Builder, areaWidth int32) {
	builder.PrependInt32Slot(10, areaWidth, 0)
}
func TextFieldOptionsAddAreaHeight(builder *flatbuffers.Builder, areaHeight int32) {
	builder.PrependInt32Slot(11, areaHeight, 0)
}
func TextFieldOptionsAddIsCustomSize(builder *flatbuffers.Builder, isCustomSize bool) {
	builder.PrependBoolSlot(12, isCustomSize, false)
}
func TextFieldOptionsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
