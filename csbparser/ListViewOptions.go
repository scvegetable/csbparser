// automatically generated by the FlatBuffers compiler, do not modify

package csbparser

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ListViewOptions struct {
	_tab flatbuffers.Table
}

func GetRootAsListViewOptions(buf []byte, offset flatbuffers.UOffsetT) *ListViewOptions {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ListViewOptions{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *ListViewOptions) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ListViewOptions) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ListViewOptions) WidgetOptions(obj *WidgetOptions) *WidgetOptions {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(WidgetOptions)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *ListViewOptions) BackGroundImageData(obj *ResourceData) *ResourceData {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(ResourceData)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *ListViewOptions) ClipEnabled() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ListViewOptions) MutateClipEnabled(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

func (rcv *ListViewOptions) BgColor(obj *Color) *Color {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Color)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *ListViewOptions) BgStartColor(obj *Color) *Color {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Color)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *ListViewOptions) BgEndColor(obj *Color) *Color {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Color)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *ListViewOptions) ColorType() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ListViewOptions) MutateColorType(n int32) bool {
	return rcv._tab.MutateInt32Slot(16, n)
}

func (rcv *ListViewOptions) BgColorOpacity() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 255
}

func (rcv *ListViewOptions) MutateBgColorOpacity(n byte) bool {
	return rcv._tab.MutateByteSlot(18, n)
}

func (rcv *ListViewOptions) ColorVector(obj *ColorVector) *ColorVector {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(ColorVector)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *ListViewOptions) CapInsets(obj *CapInsets) *CapInsets {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(CapInsets)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *ListViewOptions) Scale9Size(obj *FlatSize) *FlatSize {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(FlatSize)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *ListViewOptions) BackGroundScale9Enabled() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ListViewOptions) MutateBackGroundScale9Enabled(n bool) bool {
	return rcv._tab.MutateBoolSlot(26, n)
}

func (rcv *ListViewOptions) InnerSize(obj *FlatSize) *FlatSize {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(FlatSize)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *ListViewOptions) Direction() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ListViewOptions) MutateDirection(n int32) bool {
	return rcv._tab.MutateInt32Slot(30, n)
}

func (rcv *ListViewOptions) BounceEnabled() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ListViewOptions) MutateBounceEnabled(n bool) bool {
	return rcv._tab.MutateBoolSlot(32, n)
}

func (rcv *ListViewOptions) ItemMargin() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ListViewOptions) MutateItemMargin(n int32) bool {
	return rcv._tab.MutateInt32Slot(34, n)
}

func (rcv *ListViewOptions) DirectionType() string {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.String(o + rcv._tab.Pos)
	}
	return ""
}

func (rcv *ListViewOptions) HorizontalType() string {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.String(o + rcv._tab.Pos)
	}
	return ""
}

func (rcv *ListViewOptions) VerticalType() string {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.String(o + rcv._tab.Pos)
	}
	return ""
}

func ListViewOptionsStart(builder *flatbuffers.Builder) {
	builder.StartObject(19)
}
func ListViewOptionsAddWidgetOptions(builder *flatbuffers.Builder, widgetOptions flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(widgetOptions), 0)
}
func ListViewOptionsAddBackGroundImageData(builder *flatbuffers.Builder, backGroundImageData flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(backGroundImageData), 0)
}
func ListViewOptionsAddClipEnabled(builder *flatbuffers.Builder, clipEnabled bool) {
	builder.PrependBoolSlot(2, clipEnabled, false)
}
func ListViewOptionsAddBgColor(builder *flatbuffers.Builder, bgColor flatbuffers.UOffsetT) {
	builder.PrependStructSlot(3, flatbuffers.UOffsetT(bgColor), 0)
}
func ListViewOptionsAddBgStartColor(builder *flatbuffers.Builder, bgStartColor flatbuffers.UOffsetT) {
	builder.PrependStructSlot(4, flatbuffers.UOffsetT(bgStartColor), 0)
}
func ListViewOptionsAddBgEndColor(builder *flatbuffers.Builder, bgEndColor flatbuffers.UOffsetT) {
	builder.PrependStructSlot(5, flatbuffers.UOffsetT(bgEndColor), 0)
}
func ListViewOptionsAddColorType(builder *flatbuffers.Builder, colorType int32) {
	builder.PrependInt32Slot(6, colorType, 0)
}
func ListViewOptionsAddBgColorOpacity(builder *flatbuffers.Builder, bgColorOpacity byte) {
	builder.PrependByteSlot(7, bgColorOpacity, 255)
}
func ListViewOptionsAddColorVector(builder *flatbuffers.Builder, colorVector flatbuffers.UOffsetT) {
	builder.PrependStructSlot(8, flatbuffers.UOffsetT(colorVector), 0)
}
func ListViewOptionsAddCapInsets(builder *flatbuffers.Builder, capInsets flatbuffers.UOffsetT) {
	builder.PrependStructSlot(9, flatbuffers.UOffsetT(capInsets), 0)
}
func ListViewOptionsAddScale9Size(builder *flatbuffers.Builder, scale9Size flatbuffers.UOffsetT) {
	builder.PrependStructSlot(10, flatbuffers.UOffsetT(scale9Size), 0)
}
func ListViewOptionsAddBackGroundScale9Enabled(builder *flatbuffers.Builder, backGroundScale9Enabled bool) {
	builder.PrependBoolSlot(11, backGroundScale9Enabled, false)
}
func ListViewOptionsAddInnerSize(builder *flatbuffers.Builder, innerSize flatbuffers.UOffsetT) {
	builder.PrependStructSlot(12, flatbuffers.UOffsetT(innerSize), 0)
}
func ListViewOptionsAddDirection(builder *flatbuffers.Builder, direction int32) {
	builder.PrependInt32Slot(13, direction, 0)
}
func ListViewOptionsAddBounceEnabled(builder *flatbuffers.Builder, bounceEnabled bool) {
	builder.PrependBoolSlot(14, bounceEnabled, false)
}
func ListViewOptionsAddItemMargin(builder *flatbuffers.Builder, itemMargin int32) {
	builder.PrependInt32Slot(15, itemMargin, 0)
}
func ListViewOptionsAddDirectionType(builder *flatbuffers.Builder, directionType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(directionType), 0)
}
func ListViewOptionsAddHorizontalType(builder *flatbuffers.Builder, horizontalType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(horizontalType), 0)
}
func ListViewOptionsAddVerticalType(builder *flatbuffers.Builder, verticalType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(verticalType), 0)
}
func ListViewOptionsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
