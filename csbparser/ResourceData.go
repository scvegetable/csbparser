// automatically generated by the FlatBuffers compiler, do not modify

package csbparser

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ResourceData struct {
	_tab flatbuffers.Table
}

func GetRootAsResourceData(buf []byte, offset flatbuffers.UOffsetT) *ResourceData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ResourceData{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *ResourceData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ResourceData) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ResourceData) Path() string {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.String(o + rcv._tab.Pos)
	}
	return ""
}

func (rcv *ResourceData) PlistFile() string {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.String(o + rcv._tab.Pos)
	}
	return ""
}

func (rcv *ResourceData) ResourceType() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ResourceData) MutateResourceType(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func ResourceDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func ResourceDataAddPath(builder *flatbuffers.Builder, path flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(path), 0)
}
func ResourceDataAddPlistFile(builder *flatbuffers.Builder, plistFile flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(plistFile), 0)
}
func ResourceDataAddResourceType(builder *flatbuffers.Builder, resourceType int32) {
	builder.PrependInt32Slot(2, resourceType, 0)
}
func ResourceDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
