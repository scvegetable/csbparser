// automatically generated by the FlatBuffers compiler, do not modify

package csbparser

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type EasingData struct {
	_tab flatbuffers.Table
}

func GetRootAsEasingData(buf []byte, offset flatbuffers.UOffsetT) *EasingData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EasingData{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *EasingData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EasingData) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *EasingData) EaseType() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return -1
}

func (rcv *EasingData) MutateEaseType(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *EasingData) Points(obj *Position, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 8
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *EasingData) PointsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func EasingDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func EasingDataAddEaseType(builder *flatbuffers.Builder, easeType int32) {
	builder.PrependInt32Slot(0, easeType, -1)
}
func EasingDataAddPoints(builder *flatbuffers.Builder, points flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(points), 0)
}
func EasingDataStartPointsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 4)
}
func EasingDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
