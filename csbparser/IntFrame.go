// automatically generated by the FlatBuffers compiler, do not modify

package csbparser

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type IntFrame struct {
	_tab flatbuffers.Table
}

func GetRootAsIntFrame(buf []byte, offset flatbuffers.UOffsetT) *IntFrame {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &IntFrame{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *IntFrame) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *IntFrame) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *IntFrame) FrameIndex() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *IntFrame) MutateFrameIndex(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *IntFrame) Tween() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return true
}

func (rcv *IntFrame) MutateTween(n bool) bool {
	return rcv._tab.MutateBoolSlot(6, n)
}

func (rcv *IntFrame) Value() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *IntFrame) MutateValue(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *IntFrame) EasingData(obj *EasingData) *EasingData {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(EasingData)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func IntFrameStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func IntFrameAddFrameIndex(builder *flatbuffers.Builder, frameIndex int32) {
	builder.PrependInt32Slot(0, frameIndex, 0)
}
func IntFrameAddTween(builder *flatbuffers.Builder, tween bool) {
	builder.PrependBoolSlot(1, tween, true)
}
func IntFrameAddValue(builder *flatbuffers.Builder, value int32) {
	builder.PrependInt32Slot(2, value, 0)
}
func IntFrameAddEasingData(builder *flatbuffers.Builder, easingData flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(easingData), 0)
}
func IntFrameEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
