// automatically generated by the FlatBuffers compiler, do not modify

package csbparser

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type PageViewOptions struct {
	_tab flatbuffers.Table
}

func GetRootAsPageViewOptions(buf []byte, offset flatbuffers.UOffsetT) *PageViewOptions {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &PageViewOptions{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *PageViewOptions) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *PageViewOptions) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *PageViewOptions) WidgetOptions(obj *WidgetOptions) *WidgetOptions {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(WidgetOptions)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *PageViewOptions) BackGroundImageData(obj *ResourceData) *ResourceData {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(ResourceData)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *PageViewOptions) ClipEnabled() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *PageViewOptions) MutateClipEnabled(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

func (rcv *PageViewOptions) BgColor(obj *Color) *Color {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Color)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *PageViewOptions) BgStartColor(obj *Color) *Color {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Color)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *PageViewOptions) BgEndColor(obj *Color) *Color {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Color)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *PageViewOptions) ColorType() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PageViewOptions) MutateColorType(n int32) bool {
	return rcv._tab.MutateInt32Slot(16, n)
}

func (rcv *PageViewOptions) BgColorOpacity() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 255
}

func (rcv *PageViewOptions) MutateBgColorOpacity(n byte) bool {
	return rcv._tab.MutateByteSlot(18, n)
}

func (rcv *PageViewOptions) ColorVector(obj *ColorVector) *ColorVector {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(ColorVector)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *PageViewOptions) CapInsets(obj *CapInsets) *CapInsets {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(CapInsets)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *PageViewOptions) Scale9Size(obj *FlatSize) *FlatSize {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(FlatSize)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *PageViewOptions) BackGroundScale9Enabled() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *PageViewOptions) MutateBackGroundScale9Enabled(n bool) bool {
	return rcv._tab.MutateBoolSlot(26, n)
}

func PageViewOptionsStart(builder *flatbuffers.Builder) {
	builder.StartObject(12)
}
func PageViewOptionsAddWidgetOptions(builder *flatbuffers.Builder, widgetOptions flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(widgetOptions), 0)
}
func PageViewOptionsAddBackGroundImageData(builder *flatbuffers.Builder, backGroundImageData flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(backGroundImageData), 0)
}
func PageViewOptionsAddClipEnabled(builder *flatbuffers.Builder, clipEnabled bool) {
	builder.PrependBoolSlot(2, clipEnabled, false)
}
func PageViewOptionsAddBgColor(builder *flatbuffers.Builder, bgColor flatbuffers.UOffsetT) {
	builder.PrependStructSlot(3, flatbuffers.UOffsetT(bgColor), 0)
}
func PageViewOptionsAddBgStartColor(builder *flatbuffers.Builder, bgStartColor flatbuffers.UOffsetT) {
	builder.PrependStructSlot(4, flatbuffers.UOffsetT(bgStartColor), 0)
}
func PageViewOptionsAddBgEndColor(builder *flatbuffers.Builder, bgEndColor flatbuffers.UOffsetT) {
	builder.PrependStructSlot(5, flatbuffers.UOffsetT(bgEndColor), 0)
}
func PageViewOptionsAddColorType(builder *flatbuffers.Builder, colorType int32) {
	builder.PrependInt32Slot(6, colorType, 0)
}
func PageViewOptionsAddBgColorOpacity(builder *flatbuffers.Builder, bgColorOpacity byte) {
	builder.PrependByteSlot(7, bgColorOpacity, 255)
}
func PageViewOptionsAddColorVector(builder *flatbuffers.Builder, colorVector flatbuffers.UOffsetT) {
	builder.PrependStructSlot(8, flatbuffers.UOffsetT(colorVector), 0)
}
func PageViewOptionsAddCapInsets(builder *flatbuffers.Builder, capInsets flatbuffers.UOffsetT) {
	builder.PrependStructSlot(9, flatbuffers.UOffsetT(capInsets), 0)
}
func PageViewOptionsAddScale9Size(builder *flatbuffers.Builder, scale9Size flatbuffers.UOffsetT) {
	builder.PrependStructSlot(10, flatbuffers.UOffsetT(scale9Size), 0)
}
func PageViewOptionsAddBackGroundScale9Enabled(builder *flatbuffers.Builder, backGroundScale9Enabled bool) {
	builder.PrependBoolSlot(11, backGroundScale9Enabled, false)
}
func PageViewOptionsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
