// automatically generated by the FlatBuffers compiler, do not modify

package csbparser

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ProjectNodeOptions struct {
	_tab flatbuffers.Table
}

func GetRootAsProjectNodeOptions(buf []byte, offset flatbuffers.UOffsetT) *ProjectNodeOptions {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ProjectNodeOptions{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *ProjectNodeOptions) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ProjectNodeOptions) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ProjectNodeOptions) NodeOptions(obj *WidgetOptions) *WidgetOptions {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(WidgetOptions)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *ProjectNodeOptions) FileName() string {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.String(o + rcv._tab.Pos)
	}
	return ""
}

func (rcv *ProjectNodeOptions) InnerActionSpeed() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *ProjectNodeOptions) MutateInnerActionSpeed(n float32) bool {
	return rcv._tab.MutateFloat32Slot(8, n)
}

func ProjectNodeOptionsStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func ProjectNodeOptionsAddNodeOptions(builder *flatbuffers.Builder, nodeOptions flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(nodeOptions), 0)
}
func ProjectNodeOptionsAddFileName(builder *flatbuffers.Builder, fileName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(fileName), 0)
}
func ProjectNodeOptionsAddInnerActionSpeed(builder *flatbuffers.Builder, innerActionSpeed float32) {
	builder.PrependFloat32Slot(2, innerActionSpeed, 0.0)
}
func ProjectNodeOptionsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
