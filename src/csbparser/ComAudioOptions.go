// automatically generated by the FlatBuffers compiler, do not modify

package csbparser

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ComAudioOptions struct {
	_tab flatbuffers.Table
}

func GetRootAsComAudioOptions(buf []byte, offset flatbuffers.UOffsetT) *ComAudioOptions {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ComAudioOptions{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *ComAudioOptions) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ComAudioOptions) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ComAudioOptions) NodeOptions(obj *WidgetOptions) *WidgetOptions {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(WidgetOptions)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *ComAudioOptions) Name() string {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.String(o + rcv._tab.Pos)
	}
	return ""
}

func (rcv *ComAudioOptions) Enabled() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ComAudioOptions) MutateEnabled(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

func (rcv *ComAudioOptions) Loop() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ComAudioOptions) MutateLoop(n bool) bool {
	return rcv._tab.MutateBoolSlot(10, n)
}

func (rcv *ComAudioOptions) Volume() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ComAudioOptions) MutateVolume(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

func (rcv *ComAudioOptions) FileNameData(obj *ResourceData) *ResourceData {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(ResourceData)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func ComAudioOptionsStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func ComAudioOptionsAddNodeOptions(builder *flatbuffers.Builder, nodeOptions flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(nodeOptions), 0)
}
func ComAudioOptionsAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(name), 0)
}
func ComAudioOptionsAddEnabled(builder *flatbuffers.Builder, enabled bool) {
	builder.PrependBoolSlot(2, enabled, false)
}
func ComAudioOptionsAddLoop(builder *flatbuffers.Builder, loop bool) {
	builder.PrependBoolSlot(3, loop, false)
}
func ComAudioOptionsAddVolume(builder *flatbuffers.Builder, volume int32) {
	builder.PrependInt32Slot(4, volume, 0)
}
func ComAudioOptionsAddFileNameData(builder *flatbuffers.Builder, fileNameData flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(fileNameData), 0)
}
func ComAudioOptionsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
