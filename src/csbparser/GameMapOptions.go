// automatically generated by the FlatBuffers compiler, do not modify

package csbparser

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type GameMapOptions struct {
	_tab flatbuffers.Table
}

func GetRootAsGameMapOptions(buf []byte, offset flatbuffers.UOffsetT) *GameMapOptions {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GameMapOptions{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *GameMapOptions) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GameMapOptions) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *GameMapOptions) NodeOptions(obj *WidgetOptions) *WidgetOptions {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(WidgetOptions)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *GameMapOptions) FileNameData(obj *ResourceData) *ResourceData {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(ResourceData)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func GameMapOptionsStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func GameMapOptionsAddNodeOptions(builder *flatbuffers.Builder, nodeOptions flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(nodeOptions), 0)
}
func GameMapOptionsAddFileNameData(builder *flatbuffers.Builder, fileNameData flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(fileNameData), 0)
}
func GameMapOptionsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
