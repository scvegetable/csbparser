// automatically generated by the FlatBuffers compiler, do not modify

package csbparser

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CSParseBinary struct {
	_tab flatbuffers.Table
}

func GetRootAsCSParseBinary(buf []byte, offset flatbuffers.UOffsetT) *CSParseBinary {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CSParseBinary{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *CSParseBinary) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CSParseBinary) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CSParseBinary) Version() string {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.String(o + rcv._tab.Pos)
	}
	return ""
}

func (rcv *CSParseBinary) Textures(j int) string {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.String(a + flatbuffers.UOffsetT(j*4))
	}
	return ""
}

func (rcv *CSParseBinary) TexturesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *CSParseBinary) TexturePngs(j int) string {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.String(a + flatbuffers.UOffsetT(j*4))
	}
	return ""
}

func (rcv *CSParseBinary) TexturePngsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *CSParseBinary) NodeTree(obj *NodeTree) *NodeTree {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(NodeTree)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *CSParseBinary) Action(obj *NodeAction) *NodeAction {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(NodeAction)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *CSParseBinary) AnimationList(obj *AnimationInfo, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *CSParseBinary) AnimationListLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func CSParseBinaryStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func CSParseBinaryAddVersion(builder *flatbuffers.Builder, version flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(version), 0)
}
func CSParseBinaryAddTextures(builder *flatbuffers.Builder, textures flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(textures), 0)
}
func CSParseBinaryStartTexturesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func CSParseBinaryAddTexturePngs(builder *flatbuffers.Builder, texturePngs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(texturePngs), 0)
}
func CSParseBinaryStartTexturePngsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func CSParseBinaryAddNodeTree(builder *flatbuffers.Builder, nodeTree flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(nodeTree), 0)
}
func CSParseBinaryAddAction(builder *flatbuffers.Builder, action flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(action), 0)
}
func CSParseBinaryAddAnimationList(builder *flatbuffers.Builder, animationList flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(animationList), 0)
}
func CSParseBinaryStartAnimationListVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func CSParseBinaryEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
