// automatically generated by the FlatBuffers compiler, do not modify

package csbparser

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SliderOptions struct {
	_tab flatbuffers.Table
}

func GetRootAsSliderOptions(buf []byte, offset flatbuffers.UOffsetT) *SliderOptions {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SliderOptions{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *SliderOptions) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SliderOptions) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SliderOptions) WidgetOptions(obj *WidgetOptions) *WidgetOptions {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(WidgetOptions)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *SliderOptions) BarFileNameData(obj *ResourceData) *ResourceData {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(ResourceData)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *SliderOptions) BallNormalData(obj *ResourceData) *ResourceData {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(ResourceData)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *SliderOptions) BallPressedData(obj *ResourceData) *ResourceData {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(ResourceData)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *SliderOptions) BallDisabledData(obj *ResourceData) *ResourceData {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(ResourceData)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *SliderOptions) ProgressBarData(obj *ResourceData) *ResourceData {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(ResourceData)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *SliderOptions) Percent() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 50
}

func (rcv *SliderOptions) MutatePercent(n int32) bool {
	return rcv._tab.MutateInt32Slot(16, n)
}

func (rcv *SliderOptions) Displaystate() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return true
}

func (rcv *SliderOptions) MutateDisplaystate(n bool) bool {
	return rcv._tab.MutateBoolSlot(18, n)
}

func SliderOptionsStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func SliderOptionsAddWidgetOptions(builder *flatbuffers.Builder, widgetOptions flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(widgetOptions), 0)
}
func SliderOptionsAddBarFileNameData(builder *flatbuffers.Builder, barFileNameData flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(barFileNameData), 0)
}
func SliderOptionsAddBallNormalData(builder *flatbuffers.Builder, ballNormalData flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(ballNormalData), 0)
}
func SliderOptionsAddBallPressedData(builder *flatbuffers.Builder, ballPressedData flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(ballPressedData), 0)
}
func SliderOptionsAddBallDisabledData(builder *flatbuffers.Builder, ballDisabledData flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(ballDisabledData), 0)
}
func SliderOptionsAddProgressBarData(builder *flatbuffers.Builder, progressBarData flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(progressBarData), 0)
}
func SliderOptionsAddPercent(builder *flatbuffers.Builder, percent int32) {
	builder.PrependInt32Slot(6, percent, 50)
}
func SliderOptionsAddDisplaystate(builder *flatbuffers.Builder, displaystate bool) {
	builder.PrependBoolSlot(7, displaystate, true)
}
func SliderOptionsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
