// automatically generated by the FlatBuffers compiler, do not modify

package csbparser

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type TextAtlasOptions struct {
	_tab flatbuffers.Table
}

func GetRootAsTextAtlasOptions(buf []byte, offset flatbuffers.UOffsetT) *TextAtlasOptions {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TextAtlasOptions{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *TextAtlasOptions) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TextAtlasOptions) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *TextAtlasOptions) WidgetOptions(obj *WidgetOptions) *WidgetOptions {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(WidgetOptions)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *TextAtlasOptions) CharMapFileData(obj *ResourceData) *ResourceData {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(ResourceData)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *TextAtlasOptions) StringValue() string {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.String(o + rcv._tab.Pos)
	}
	return ""
}

func (rcv *TextAtlasOptions) StartCharMap() string {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.String(o + rcv._tab.Pos)
	}
	return ""
}

func (rcv *TextAtlasOptions) ItemWidth() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TextAtlasOptions) MutateItemWidth(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

func (rcv *TextAtlasOptions) ItemHeight() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TextAtlasOptions) MutateItemHeight(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

func TextAtlasOptionsStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func TextAtlasOptionsAddWidgetOptions(builder *flatbuffers.Builder, widgetOptions flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(widgetOptions), 0)
}
func TextAtlasOptionsAddCharMapFileData(builder *flatbuffers.Builder, charMapFileData flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(charMapFileData), 0)
}
func TextAtlasOptionsAddStringValue(builder *flatbuffers.Builder, stringValue flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(stringValue), 0)
}
func TextAtlasOptionsAddStartCharMap(builder *flatbuffers.Builder, startCharMap flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(startCharMap), 0)
}
func TextAtlasOptionsAddItemWidth(builder *flatbuffers.Builder, itemWidth int32) {
	builder.PrependInt32Slot(4, itemWidth, 0)
}
func TextAtlasOptionsAddItemHeight(builder *flatbuffers.Builder, itemHeight int32) {
	builder.PrependInt32Slot(5, itemHeight, 0)
}
func TextAtlasOptionsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
