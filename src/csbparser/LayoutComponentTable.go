// automatically generated by the FlatBuffers compiler, do not modify

package csbparser

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type LayoutComponentTable struct {
	_tab flatbuffers.Table
}

func GetRootAsLayoutComponentTable(buf []byte, offset flatbuffers.UOffsetT) *LayoutComponentTable {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &LayoutComponentTable{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *LayoutComponentTable) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *LayoutComponentTable) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *LayoutComponentTable) PositionXPercentEnabled() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *LayoutComponentTable) MutatePositionXPercentEnabled(n bool) bool {
	return rcv._tab.MutateBoolSlot(4, n)
}

func (rcv *LayoutComponentTable) PositionYPercentEnabled() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *LayoutComponentTable) MutatePositionYPercentEnabled(n bool) bool {
	return rcv._tab.MutateBoolSlot(6, n)
}

func (rcv *LayoutComponentTable) PositionXPercent() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *LayoutComponentTable) MutatePositionXPercent(n float32) bool {
	return rcv._tab.MutateFloat32Slot(8, n)
}

func (rcv *LayoutComponentTable) PositionYPercent() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *LayoutComponentTable) MutatePositionYPercent(n float32) bool {
	return rcv._tab.MutateFloat32Slot(10, n)
}

func (rcv *LayoutComponentTable) SizeXPercentEnable() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *LayoutComponentTable) MutateSizeXPercentEnable(n bool) bool {
	return rcv._tab.MutateBoolSlot(12, n)
}

func (rcv *LayoutComponentTable) SizeYPercentEnable() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *LayoutComponentTable) MutateSizeYPercentEnable(n bool) bool {
	return rcv._tab.MutateBoolSlot(14, n)
}

func (rcv *LayoutComponentTable) SizeXPercent() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *LayoutComponentTable) MutateSizeXPercent(n float32) bool {
	return rcv._tab.MutateFloat32Slot(16, n)
}

func (rcv *LayoutComponentTable) SizeYPercent() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *LayoutComponentTable) MutateSizeYPercent(n float32) bool {
	return rcv._tab.MutateFloat32Slot(18, n)
}

func (rcv *LayoutComponentTable) StretchHorizontalEnabled() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *LayoutComponentTable) MutateStretchHorizontalEnabled(n bool) bool {
	return rcv._tab.MutateBoolSlot(20, n)
}

func (rcv *LayoutComponentTable) StretchVerticalEnabled() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *LayoutComponentTable) MutateStretchVerticalEnabled(n bool) bool {
	return rcv._tab.MutateBoolSlot(22, n)
}

func (rcv *LayoutComponentTable) HorizontalEdge() string {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.String(o + rcv._tab.Pos)
	}
	return ""
}

func (rcv *LayoutComponentTable) VerticalEdge() string {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.String(o + rcv._tab.Pos)
	}
	return ""
}

func (rcv *LayoutComponentTable) LeftMargin() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *LayoutComponentTable) MutateLeftMargin(n float32) bool {
	return rcv._tab.MutateFloat32Slot(28, n)
}

func (rcv *LayoutComponentTable) RightMargin() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *LayoutComponentTable) MutateRightMargin(n float32) bool {
	return rcv._tab.MutateFloat32Slot(30, n)
}

func (rcv *LayoutComponentTable) TopMargin() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *LayoutComponentTable) MutateTopMargin(n float32) bool {
	return rcv._tab.MutateFloat32Slot(32, n)
}

func (rcv *LayoutComponentTable) BottomMargin() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *LayoutComponentTable) MutateBottomMargin(n float32) bool {
	return rcv._tab.MutateFloat32Slot(34, n)
}

func LayoutComponentTableStart(builder *flatbuffers.Builder) {
	builder.StartObject(16)
}
func LayoutComponentTableAddPositionXPercentEnabled(builder *flatbuffers.Builder, positionXPercentEnabled bool) {
	builder.PrependBoolSlot(0, positionXPercentEnabled, false)
}
func LayoutComponentTableAddPositionYPercentEnabled(builder *flatbuffers.Builder, positionYPercentEnabled bool) {
	builder.PrependBoolSlot(1, positionYPercentEnabled, false)
}
func LayoutComponentTableAddPositionXPercent(builder *flatbuffers.Builder, positionXPercent float32) {
	builder.PrependFloat32Slot(2, positionXPercent, 0.0)
}
func LayoutComponentTableAddPositionYPercent(builder *flatbuffers.Builder, positionYPercent float32) {
	builder.PrependFloat32Slot(3, positionYPercent, 0.0)
}
func LayoutComponentTableAddSizeXPercentEnable(builder *flatbuffers.Builder, sizeXPercentEnable bool) {
	builder.PrependBoolSlot(4, sizeXPercentEnable, false)
}
func LayoutComponentTableAddSizeYPercentEnable(builder *flatbuffers.Builder, sizeYPercentEnable bool) {
	builder.PrependBoolSlot(5, sizeYPercentEnable, false)
}
func LayoutComponentTableAddSizeXPercent(builder *flatbuffers.Builder, sizeXPercent float32) {
	builder.PrependFloat32Slot(6, sizeXPercent, 0.0)
}
func LayoutComponentTableAddSizeYPercent(builder *flatbuffers.Builder, sizeYPercent float32) {
	builder.PrependFloat32Slot(7, sizeYPercent, 0.0)
}
func LayoutComponentTableAddStretchHorizontalEnabled(builder *flatbuffers.Builder, stretchHorizontalEnabled bool) {
	builder.PrependBoolSlot(8, stretchHorizontalEnabled, false)
}
func LayoutComponentTableAddStretchVerticalEnabled(builder *flatbuffers.Builder, stretchVerticalEnabled bool) {
	builder.PrependBoolSlot(9, stretchVerticalEnabled, false)
}
func LayoutComponentTableAddHorizontalEdge(builder *flatbuffers.Builder, horizontalEdge flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(horizontalEdge), 0)
}
func LayoutComponentTableAddVerticalEdge(builder *flatbuffers.Builder, verticalEdge flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(verticalEdge), 0)
}
func LayoutComponentTableAddLeftMargin(builder *flatbuffers.Builder, leftMargin float32) {
	builder.PrependFloat32Slot(12, leftMargin, 0.0)
}
func LayoutComponentTableAddRightMargin(builder *flatbuffers.Builder, rightMargin float32) {
	builder.PrependFloat32Slot(13, rightMargin, 0.0)
}
func LayoutComponentTableAddTopMargin(builder *flatbuffers.Builder, topMargin float32) {
	builder.PrependFloat32Slot(14, topMargin, 0.0)
}
func LayoutComponentTableAddBottomMargin(builder *flatbuffers.Builder, bottomMargin float32) {
	builder.PrependFloat32Slot(15, bottomMargin, 0.0)
}
func LayoutComponentTableEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
