// automatically generated by the FlatBuffers compiler, do not modify

package csbparser

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type NodeAction struct {
	_tab flatbuffers.Table
}

func GetRootAsNodeAction(buf []byte, offset flatbuffers.UOffsetT) *NodeAction {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &NodeAction{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *NodeAction) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *NodeAction) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *NodeAction) Duration() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *NodeAction) MutateDuration(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *NodeAction) Speed() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *NodeAction) MutateSpeed(n float32) bool {
	return rcv._tab.MutateFloat32Slot(6, n)
}

func (rcv *NodeAction) TimeLines(obj *TimeLine, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *NodeAction) TimeLinesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *NodeAction) CurrentAnimationName() string {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.String(o + rcv._tab.Pos)
	}
	return ""
}

func NodeActionStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func NodeActionAddDuration(builder *flatbuffers.Builder, duration int32) {
	builder.PrependInt32Slot(0, duration, 0)
}
func NodeActionAddSpeed(builder *flatbuffers.Builder, speed float32) {
	builder.PrependFloat32Slot(1, speed, 0.0)
}
func NodeActionAddTimeLines(builder *flatbuffers.Builder, timeLines flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(timeLines), 0)
}
func NodeActionStartTimeLinesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func NodeActionAddCurrentAnimationName(builder *flatbuffers.Builder, currentAnimationName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(currentAnimationName), 0)
}
func NodeActionEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
