// automatically generated by the FlatBuffers compiler, do not modify

package csbparser

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type TextOptions struct {
	_tab flatbuffers.Table
}

func GetRootAsTextOptions(buf []byte, offset flatbuffers.UOffsetT) *TextOptions {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TextOptions{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *TextOptions) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TextOptions) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *TextOptions) WidgetOptions(obj *WidgetOptions) *WidgetOptions {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(WidgetOptions)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *TextOptions) FontResource(obj *ResourceData) *ResourceData {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(ResourceData)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *TextOptions) FontName() string {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.String(o + rcv._tab.Pos)
	}
	return ""
}

func (rcv *TextOptions) FontSize() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TextOptions) MutateFontSize(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *TextOptions) Text() string {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.String(o + rcv._tab.Pos)
	}
	return ""
}

func (rcv *TextOptions) AreaWidth() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TextOptions) MutateAreaWidth(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

func (rcv *TextOptions) AreaHeight() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TextOptions) MutateAreaHeight(n int32) bool {
	return rcv._tab.MutateInt32Slot(16, n)
}

func (rcv *TextOptions) HAlignment() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TextOptions) MutateHAlignment(n int32) bool {
	return rcv._tab.MutateInt32Slot(18, n)
}

func (rcv *TextOptions) VAlignment() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TextOptions) MutateVAlignment(n int32) bool {
	return rcv._tab.MutateInt32Slot(20, n)
}

func (rcv *TextOptions) TouchScaleEnable() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *TextOptions) MutateTouchScaleEnable(n bool) bool {
	return rcv._tab.MutateBoolSlot(22, n)
}

func (rcv *TextOptions) IsCustomSize() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *TextOptions) MutateIsCustomSize(n bool) bool {
	return rcv._tab.MutateBoolSlot(24, n)
}

func (rcv *TextOptions) OutlineEnabled() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *TextOptions) MutateOutlineEnabled(n bool) bool {
	return rcv._tab.MutateBoolSlot(26, n)
}

func (rcv *TextOptions) OutlineColor(obj *Color) *Color {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Color)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *TextOptions) OutlineSize() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 1
}

func (rcv *TextOptions) MutateOutlineSize(n int32) bool {
	return rcv._tab.MutateInt32Slot(30, n)
}

func (rcv *TextOptions) ShadowEnabled() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *TextOptions) MutateShadowEnabled(n bool) bool {
	return rcv._tab.MutateBoolSlot(32, n)
}

func (rcv *TextOptions) ShadowColor(obj *Color) *Color {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Color)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *TextOptions) ShadowOffsetX() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 2.0
}

func (rcv *TextOptions) MutateShadowOffsetX(n float32) bool {
	return rcv._tab.MutateFloat32Slot(36, n)
}

func (rcv *TextOptions) ShadowOffsetY() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return -2.0
}

func (rcv *TextOptions) MutateShadowOffsetY(n float32) bool {
	return rcv._tab.MutateFloat32Slot(38, n)
}

func (rcv *TextOptions) ShadowBlurRadius() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TextOptions) MutateShadowBlurRadius(n int32) bool {
	return rcv._tab.MutateInt32Slot(40, n)
}

func TextOptionsStart(builder *flatbuffers.Builder) {
	builder.StartObject(19)
}
func TextOptionsAddWidgetOptions(builder *flatbuffers.Builder, widgetOptions flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(widgetOptions), 0)
}
func TextOptionsAddFontResource(builder *flatbuffers.Builder, fontResource flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(fontResource), 0)
}
func TextOptionsAddFontName(builder *flatbuffers.Builder, fontName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(fontName), 0)
}
func TextOptionsAddFontSize(builder *flatbuffers.Builder, fontSize int32) {
	builder.PrependInt32Slot(3, fontSize, 0)
}
func TextOptionsAddText(builder *flatbuffers.Builder, text flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(text), 0)
}
func TextOptionsAddAreaWidth(builder *flatbuffers.Builder, areaWidth int32) {
	builder.PrependInt32Slot(5, areaWidth, 0)
}
func TextOptionsAddAreaHeight(builder *flatbuffers.Builder, areaHeight int32) {
	builder.PrependInt32Slot(6, areaHeight, 0)
}
func TextOptionsAddHAlignment(builder *flatbuffers.Builder, hAlignment int32) {
	builder.PrependInt32Slot(7, hAlignment, 0)
}
func TextOptionsAddVAlignment(builder *flatbuffers.Builder, vAlignment int32) {
	builder.PrependInt32Slot(8, vAlignment, 0)
}
func TextOptionsAddTouchScaleEnable(builder *flatbuffers.Builder, touchScaleEnable bool) {
	builder.PrependBoolSlot(9, touchScaleEnable, false)
}
func TextOptionsAddIsCustomSize(builder *flatbuffers.Builder, isCustomSize bool) {
	builder.PrependBoolSlot(10, isCustomSize, false)
}
func TextOptionsAddOutlineEnabled(builder *flatbuffers.Builder, outlineEnabled bool) {
	builder.PrependBoolSlot(11, outlineEnabled, false)
}
func TextOptionsAddOutlineColor(builder *flatbuffers.Builder, outlineColor flatbuffers.UOffsetT) {
	builder.PrependStructSlot(12, flatbuffers.UOffsetT(outlineColor), 0)
}
func TextOptionsAddOutlineSize(builder *flatbuffers.Builder, outlineSize int32) {
	builder.PrependInt32Slot(13, outlineSize, 1)
}
func TextOptionsAddShadowEnabled(builder *flatbuffers.Builder, shadowEnabled bool) {
	builder.PrependBoolSlot(14, shadowEnabled, false)
}
func TextOptionsAddShadowColor(builder *flatbuffers.Builder, shadowColor flatbuffers.UOffsetT) {
	builder.PrependStructSlot(15, flatbuffers.UOffsetT(shadowColor), 0)
}
func TextOptionsAddShadowOffsetX(builder *flatbuffers.Builder, shadowOffsetX float32) {
	builder.PrependFloat32Slot(16, shadowOffsetX, 2.0)
}
func TextOptionsAddShadowOffsetY(builder *flatbuffers.Builder, shadowOffsetY float32) {
	builder.PrependFloat32Slot(17, shadowOffsetY, -2.0)
}
func TextOptionsAddShadowBlurRadius(builder *flatbuffers.Builder, shadowBlurRadius int32) {
	builder.PrependInt32Slot(18, shadowBlurRadius, 0)
}
func TextOptionsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
